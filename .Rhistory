library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('Assignemnt_2_visualization.R')
runApp('Assignemnt_2_visualization.R')
runApp('Assignemnt_2_visualization.R')
runApp('Assignemnt_2_visualization.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny)
library(leaflet)
library(dplyr)
library(readr)
# Load datasets
cities <- read_csv("data/minard-cities.csv")
filter(city != "" & !is.na(city))
filter(city != "" & !is.na(city))
filter(city != "" & !is.na(city))
# Load datasets and filter out blank or missing cities
cities <- read_csv("data/minard-cities.csv") %>%
filter(city != "" & !is.na(city))
library(shiny)
library(leaflet)
library(dplyr)
library(readr)
# Load datasets and filter out blank or missing cities
cities <- read_csv("data/minard-cities.csv") %>%
filter(city != "" & !is.na(city))
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
data(Minard.troops)
data(Minard.cities)
data(Minard.temp)
## Not run:
#' ## Load required packages
require(ggplot2)
require(scales)
require(gridExtra)
#' ## plot path of troops, and another layer for city names
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group),
lineend = "round", linejoin = "round")
data(Minard.troops)
# Load required packages
library(ggplot2)
library(scales)
library(gridExtra)
library(dplyr)
library(readr)
# Load datasets and filter out unnecessary rows
cities <- read_csv("data/minard-cities.csv") %>%
filter(city != "" & !is.na(city))
# Load required packages
library(ggplot2)
library(scales)
library(gridExtra)
library(dplyr)
install.packages("gridExtra")
# Load required packages
library(ggplot2)
library(scales)
library(gridExtra)
library(scales)
library(gridExtra)
library(dplyr)
library(readr)
# Load datasets and filter out unnecessary rows
cities <- read_csv("data/minard-cities.csv") %>%
filter(city != "" & !is.na(city))
troops <- read_csv("data/minard-troops.csv")
weather <- read_csv("data/minard-temp.csv") %>%
filter(!is.na(temp))
# Check if data loaded correctly
head(cities)
head(troops)
head(weather)
# Plot troops path with size representing survivor counts
plot_troops <- ggplot(troops, aes(x = long, y = lat)) +
geom_path(aes(size = survivors, colour = direction, group = group),
lineend = "round", linejoin = "round") +
theme_minimal()
# Overlay city names on the map
plot_cities <- geom_text(data = cities, aes(x = long, y = lat, label = city), size = 4)
# Combine troop path and city name layers
breaks <- c(1, 2, 3) * 10^5  # Set survivor break points
plot_minard <- plot_troops + plot_cities +
scale_size("Survivors", range = c(1, 10),
breaks = breaks, labels = scales::comma(breaks)) +
scale_color_manual("Direction",
values = c("grey50", "red"),
labels = c("Advance", "Retreat")) +
coord_cartesian(xlim = c(24, 38)) +  # Set longitude range
xlab(NULL) +
ylab("Latitude") +
ggtitle("Napoleon's March on Moscow") +
theme_bw() +
theme(legend.position = c(.8, .2), legend.box = "horizontal")
# Create temperature plot vs. longitude with date labels
plot_temp <- ggplot(weather, aes(x = long, y = temp)) +
geom_path(color = "grey", size = 1.5) +
geom_point(size = 2) +
geom_text(aes(label = date), hjust = -0.1, size = 3) +
xlab("Longitude") +
ylab("Temperature (°C)") +
coord_cartesian(xlim = c(24, 38)) +
theme_minimal()
# Combine the two plots into one
grid.arrange(plot_minard, plot_temp, nrow = 2, heights = c(3, 1))
# Load required libraries
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(readr)
library(gridExtra)
library(scales)
# Load datasets
cities <- read_csv("data/minard-cities.csv") %>%
filter(city != "" & !is.na(city))
troops <- read_csv("data/minard-troops.csv")
weather <- read_csv("data/minard-temp.csv") %>%
filter(!is.na(temp))
# Prepare merged data
merged_data <- troops %>%
left_join(weather, by = "long") %>%
filter(!is.na(days))
# Merge weather and cities data for iteration 4
weather_cities <- inner_join(cities, weather, by = "long")
# Temperature color palette function
temperature_color <- function(temp) {
case_when(
temp >= 0 ~ "white",
temp >= -10 ~ "#cce4ff",
temp >= -20 ~ "#99cfff",
temp < -20 ~ "#0004ff"
)
}
# Define the UI
ui <- navbarPage(
"Napoleon's March - Visualization Clone",
# Interactive map and ggplot visualizations
tabPanel(
"Interactive Visualizations",
sidebarLayout(
sidebarPanel(
selectInput("iteration", "Select Iteration",
choices = list(
"Iteration 1: Basic March" = "iteration1",
"Iteration 2: Cities & Labels" = "iteration2",
"Iteration 3: Temperature Overlay" = "iteration3",
"Iteration 4: ggplot Visualization" = "iteration4"
))
),
mainPanel(
leafletOutput("march_map", height = 600),
plotOutput("ggplot_output", height = 600),
uiOutput("iteration_description")
)
)
)
)
# Server logic
server <- function(input, output, session) {
# Render the leaflet map for iterations 1, 2, and 3
observe({
req(input$iteration)
leafletProxy("march_map") %>% clearShapes() %>% clearMarkers()
if (input$iteration == "iteration1") {
# Plot the overall march using Leaflet
leafletProxy("march_map") %>%
addPolylines(data = cities %>% filter(direction == "Advance"),
lng = ~long, lat = ~lat, color = "red", weight = 10,
popup = ~paste("City:", city)) %>%
addPolylines(data = cities %>% filter(direction == "Retreat"),
lng = ~long, lat = ~lat, color = "black", weight = 3,
popup = ~paste("City:", city))
} else if (input$iteration == "iteration2") {
# Plot cities and survivor counts with circle markers
leafletProxy("march_map") %>%
addCircleMarkers(data = cities %>% filter(direction == "Advance"),
lng = ~long, lat = ~lat, radius = 8, color = "red",
fillOpacity = 0.8,
label = ~paste0("City: ", city, ", Survivors: ",
format(survivors, big.mark = ","))) %>%
addCircleMarkers(data = cities %>% filter(direction == "Retreat"),
lng = ~long, lat = ~lat, radius = 8, color = "black",
fillOpacity = 0.8,
label = ~paste0("City: ", city, ", Survivors: ",
format(survivors, big.mark = ",")))
} else if (input$iteration == "iteration3") {
# Temperature overlay visualization
temp_data <- merged_data %>% filter(!is.na(temp))
leafletProxy("march_map") %>%
addCircleMarkers(data = temp_data, lng = ~long, lat = ~lat,
radius = 30, color = ~temperature_color(temp),
fillOpacity = 0.8, popup = ~paste0("Temp: ", temp, "°C")) %>%
addLegend("bottomright",
colors = c("white", "#cce4ff", "#99cfff", "#0004ff"),
labels = c("0°C", "-5 to -10°C", "-11 to -20°C", "-21 to -30°C"),
title = "Temperature (°C)", opacity = 1)
}
})
# ggplot visualization for iteration 4
output$ggplot_output <- renderPlot({
req(input$iteration == "iteration4")
# Plot troop movement using ggplot2
plot_troops <- ggplot(troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group),
lineend = "round", linejoin = "round") +
theme_minimal()
# Add city labels
plot_cities <- geom_text(data = cities, aes(long, lat, label = city), size = 4)
# Combine troop path and city layers
plot_minard <- plot_troops + plot_cities +
scale_size("Survivors", range = c(1, 10),
breaks = c(100000, 200000, 300000),
labels = scales::comma) +
scale_color_manual("Direction",
values = c("grey50", "red"),
labels = c("Advance", "Retreat")) +
coord_cartesian(xlim = c(24, 38)) +
theme_bw() +
theme(legend.position = c(.8, .2))
# Plot temperature vs longitude
plot_temp <- ggplot(weather, aes(long, temp)) +
geom_path(color = "grey", size = 1.5) +
geom_point(size = 2) +
geom_text(aes(label = date), hjust = -0.1, size = 3) +
coord_cartesian(xlim = c(24, 38)) +
theme_minimal()
# Arrange the two plots vertically
grid.arrange(plot_minard, plot_temp, nrow = 2, heights = c(3, 1))
})
# Display iteration descriptions dynamically
output$iteration_description <- renderUI({
descriptions <- list(
iteration1 = HTML("<h4>Iteration 1: Basic March</h4><p>Visualizing the entire march...</p>"),
iteration2 = HTML("<h4>Iteration 2: Cities & Labels</h4><p>Displaying key cities...</p>"),
iteration3 = HTML("<h4>Iteration 3: Temperature Overlay</h4><p>Showing temperature...</p>"),
iteration4 = HTML("<h4>Iteration 4: ggplot Visualization</h4><p>Custom ggplot visualization...</p>")
)
descriptions[[input$iteration]]
})
}
# Run the Shiny app
shinyApp(ui, server)
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
library(shiny); runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
runApp('assignemnt 2 V3.R')
